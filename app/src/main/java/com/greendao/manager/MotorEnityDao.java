package com.greendao.manager;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.motor.administrator.DATAbase.greendao.MotorEnity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOTOR_ENITY".
*/
public class MotorEnityDao extends AbstractDao<MotorEnity, Long> {

    public static final String TABLENAME = "MOTOR_ENITY";

    /**
     * Properties of entity MotorEnity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DJXL = new Property(1, String.class, "DJXL", false, "DJXL");
        public final static Property DJ_LIB_NAME = new Property(2, String.class, "DJ_LIB_NAME", false, "DJ__LIB__NAME");
        public final static Property EDDY = new Property(3, String.class, "EDDY", false, "EDDY");
        public final static Property EDDL = new Property(4, String.class, "EDDL", false, "EDDL");
        public final static Property EDGL = new Property(5, String.class, "EDGL", false, "EDGL");
        public final static Property EDXL = new Property(6, String.class, "EDXL", false, "EDXL");
        public final static Property KZDL = new Property(7, String.class, "KZDL", false, "KZDL");
        public final static Property KZGL = new Property(8, String.class, "KZGL", false, "KZGL");
        public final static Property EDGLYS = new Property(9, String.class, "EDGLYS", false, "EDGLYS");
        public final static Property JS = new Property(10, String.class, "JS", false, "JS");
        public final static Property WGJJDL = new Property(11, String.class, "WGJJDL", false, "WGJJDL");
        public final static Property IsAdd = new Property(12, Boolean.class, "isAdd", false, "IS_ADD");
        public final static Property By0 = new Property(13, String.class, "by0", false, "BY0");
        public final static Property By1 = new Property(14, String.class, "by1", false, "BY1");
        public final static Property By2 = new Property(15, String.class, "by2", false, "BY2");
        public final static Property By3 = new Property(16, String.class, "by3", false, "BY3");
        public final static Property By4 = new Property(17, String.class, "by4", false, "BY4");
        public final static Property By5 = new Property(18, String.class, "by5", false, "BY5");
    }


    public MotorEnityDao(DaoConfig config) {
        super(config);
    }
    
    public MotorEnityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOTOR_ENITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DJXL\" TEXT," + // 1: DJXL
                "\"DJ__LIB__NAME\" TEXT," + // 2: DJ_LIB_NAME
                "\"EDDY\" TEXT," + // 3: EDDY
                "\"EDDL\" TEXT," + // 4: EDDL
                "\"EDGL\" TEXT," + // 5: EDGL
                "\"EDXL\" TEXT," + // 6: EDXL
                "\"KZDL\" TEXT," + // 7: KZDL
                "\"KZGL\" TEXT," + // 8: KZGL
                "\"EDGLYS\" TEXT," + // 9: EDGLYS
                "\"JS\" TEXT," + // 10: JS
                "\"WGJJDL\" TEXT," + // 11: WGJJDL
                "\"IS_ADD\" INTEGER," + // 12: isAdd
                "\"BY0\" TEXT," + // 13: by0
                "\"BY1\" TEXT," + // 14: by1
                "\"BY2\" TEXT," + // 15: by2
                "\"BY3\" TEXT," + // 16: by3
                "\"BY4\" TEXT," + // 17: by4
                "\"BY5\" TEXT);"); // 18: by5
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOTOR_ENITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MotorEnity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String DJXL = entity.getDJXL();
        if (DJXL != null) {
            stmt.bindString(2, DJXL);
        }
 
        String DJ_LIB_NAME = entity.getDJ_LIB_NAME();
        if (DJ_LIB_NAME != null) {
            stmt.bindString(3, DJ_LIB_NAME);
        }
 
        String EDDY = entity.getEDDY();
        if (EDDY != null) {
            stmt.bindString(4, EDDY);
        }
 
        String EDDL = entity.getEDDL();
        if (EDDL != null) {
            stmt.bindString(5, EDDL);
        }
 
        String EDGL = entity.getEDGL();
        if (EDGL != null) {
            stmt.bindString(6, EDGL);
        }
 
        String EDXL = entity.getEDXL();
        if (EDXL != null) {
            stmt.bindString(7, EDXL);
        }
 
        String KZDL = entity.getKZDL();
        if (KZDL != null) {
            stmt.bindString(8, KZDL);
        }
 
        String KZGL = entity.getKZGL();
        if (KZGL != null) {
            stmt.bindString(9, KZGL);
        }
 
        String EDGLYS = entity.getEDGLYS();
        if (EDGLYS != null) {
            stmt.bindString(10, EDGLYS);
        }
 
        String JS = entity.getJS();
        if (JS != null) {
            stmt.bindString(11, JS);
        }
 
        String WGJJDL = entity.getWGJJDL();
        if (WGJJDL != null) {
            stmt.bindString(12, WGJJDL);
        }
 
        Boolean isAdd = entity.getIsAdd();
        if (isAdd != null) {
            stmt.bindLong(13, isAdd ? 1L: 0L);
        }
 
        String by0 = entity.getBy0();
        if (by0 != null) {
            stmt.bindString(14, by0);
        }
 
        String by1 = entity.getBy1();
        if (by1 != null) {
            stmt.bindString(15, by1);
        }
 
        String by2 = entity.getBy2();
        if (by2 != null) {
            stmt.bindString(16, by2);
        }
 
        String by3 = entity.getBy3();
        if (by3 != null) {
            stmt.bindString(17, by3);
        }
 
        String by4 = entity.getBy4();
        if (by4 != null) {
            stmt.bindString(18, by4);
        }
 
        String by5 = entity.getBy5();
        if (by5 != null) {
            stmt.bindString(19, by5);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MotorEnity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String DJXL = entity.getDJXL();
        if (DJXL != null) {
            stmt.bindString(2, DJXL);
        }
 
        String DJ_LIB_NAME = entity.getDJ_LIB_NAME();
        if (DJ_LIB_NAME != null) {
            stmt.bindString(3, DJ_LIB_NAME);
        }
 
        String EDDY = entity.getEDDY();
        if (EDDY != null) {
            stmt.bindString(4, EDDY);
        }
 
        String EDDL = entity.getEDDL();
        if (EDDL != null) {
            stmt.bindString(5, EDDL);
        }
 
        String EDGL = entity.getEDGL();
        if (EDGL != null) {
            stmt.bindString(6, EDGL);
        }
 
        String EDXL = entity.getEDXL();
        if (EDXL != null) {
            stmt.bindString(7, EDXL);
        }
 
        String KZDL = entity.getKZDL();
        if (KZDL != null) {
            stmt.bindString(8, KZDL);
        }
 
        String KZGL = entity.getKZGL();
        if (KZGL != null) {
            stmt.bindString(9, KZGL);
        }
 
        String EDGLYS = entity.getEDGLYS();
        if (EDGLYS != null) {
            stmt.bindString(10, EDGLYS);
        }
 
        String JS = entity.getJS();
        if (JS != null) {
            stmt.bindString(11, JS);
        }
 
        String WGJJDL = entity.getWGJJDL();
        if (WGJJDL != null) {
            stmt.bindString(12, WGJJDL);
        }
 
        Boolean isAdd = entity.getIsAdd();
        if (isAdd != null) {
            stmt.bindLong(13, isAdd ? 1L: 0L);
        }
 
        String by0 = entity.getBy0();
        if (by0 != null) {
            stmt.bindString(14, by0);
        }
 
        String by1 = entity.getBy1();
        if (by1 != null) {
            stmt.bindString(15, by1);
        }
 
        String by2 = entity.getBy2();
        if (by2 != null) {
            stmt.bindString(16, by2);
        }
 
        String by3 = entity.getBy3();
        if (by3 != null) {
            stmt.bindString(17, by3);
        }
 
        String by4 = entity.getBy4();
        if (by4 != null) {
            stmt.bindString(18, by4);
        }
 
        String by5 = entity.getBy5();
        if (by5 != null) {
            stmt.bindString(19, by5);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MotorEnity readEntity(Cursor cursor, int offset) {
        MotorEnity entity = new MotorEnity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DJXL
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DJ_LIB_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EDDY
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // EDDL
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // EDGL
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // EDXL
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // KZDL
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // KZGL
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // EDGLYS
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // JS
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // WGJJDL
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isAdd
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // by0
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // by1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // by2
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // by3
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // by4
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // by5
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MotorEnity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDJXL(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDJ_LIB_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEDDY(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEDDL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEDGL(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEDXL(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setKZDL(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setKZGL(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEDGLYS(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setJS(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWGJJDL(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsAdd(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setBy0(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBy1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBy2(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBy3(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBy4(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBy5(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MotorEnity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MotorEnity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MotorEnity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
